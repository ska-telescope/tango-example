# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
# We store the artefact.skao.int/ska-k8s-tools/docker-builder:x.x.x as a group level variable for convenience
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.


stages:
  - lint
  - build
  - join-reports
  - test
  - deploy
  - pages
  - publish
  - scan

#Join linting reports (This stage is temporary!)
join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Include CI templates
include:
# OCI Images
  # do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'

deploy-test-environment:
  # allow_failure: true
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  stage: test
  tags:
    - k8srunner
  before_script:
    - env
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-test-environment
    auto_stop_in: 2 hours
  rules:
    - exists:
        - tests/**/*

stop-test-environment:
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  stage: test
  tags:
    - k8srunner
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  when: manual
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - exists:
        - tests/**/*

# From https://www.benjaminrancourt.ca/how-to-push-to-a-git-repository-from-a-gitlab-ci-pipeline
# Usage:
# - set the environment variable
#   - GITLAB_TOKEN that can push to the repo
# - extend the `.git:push` job
# - set the variables for the job
#   - COMMIT_MESSAGE: string
#   - SKIP_CI: 0 | 1
# - set the `script` to copy the changed files to `${CI_COMMIT_SHA}/` directory
.git:push:
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  before_script:
    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USER_LOGIN}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"
    - cd "${CI_COMMIT_SHA}"
    
    # Check out branch if it's not master
    # TODO: In MR pipelines, use ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    - |
      if [[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]]; then
        git fetch
        git checkout -t "origin/${CI_COMMIT_BRANCH}"
      fi

    - git branch
    # Set the displayed user with the commits that are about to be made
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"

    - cd "${CI_PROJECT_DIR}"
  after_script:
    # Go to the new directory
    - cd "${CI_COMMIT_SHA}"

    # Add all generated files to Git
    - git add .

    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git status

        # Commit all changes
        git commit -m "${COMMIT_MESSAGE}"

        # Update the repository
        if [ "${SKIP_CI}" -gt "0"]; then
          # Skip the pipeline create for this commit
          echo "Skip"
          git push -o ci.skip
        else
          echo "no Skip"
          git push
        fi
        echo "Over"
      else
        echo "Nothing to commit"
      fi

deploy-integration-environment:
  extends: .git:push
  stage: deploy
  variables:
    COMMIT_MESSAGE: "Deploy integration with agent"
    SKIP_CI: 0
    KUBE_NAMESPACE: "ska-tango-examples-integration"
  script:
  - make my-k8s-template-chart > manifest/engage/integration.yaml
  environment:
    name: integration
    on_stop: stop-integration-environment

stop-integration-environment:
  extends: .git:push
  stage: deploy
  script:
    - rm manifest/engage/integration.yaml
  when: manual
  environment:
    name: integration
    action: stop
  rules:
    - exists:
        - tests/**/*