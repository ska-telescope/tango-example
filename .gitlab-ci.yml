# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skatelescope.org/ska-k8s-tools/docker-builder:0.2.14

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - lint
  - join-reports
  - test
  - pages
  - publish

lint-check-chart:
  stage: lint
  tags:
    - k8srunner
  image: artefact.skatelescope.org/ska-k8s-tools/deploy:0.4.11
  script:
    - make chart_lint
  artifacts:
    paths:
      - build

python-lint:
  stage: lint
  tags:
    - k8srunner
  image: artefact.skatelescope.org/ska-tango-images/tango-itango:9.3.3.7
  script:
    - make lint
  artifacts:
    paths:
      - build/
    when: always

# Join linting reports (This stage is temporary!)
join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

unit-test:
  stage: test
  tags:
    - k8srunner
  image: artefact.skatelescope.org/ska-tango-images/tango-itango:9.3.3.7
  script:
    - make unit_test
  artifacts:
    paths:
      - build/
    when: always

test:
  stage: test
  variables:
    MINIKUBE: "false"
  tags:
    - k8srunner
  image: artefact.skatelescope.org/ska-k8s-tools/deploy:0.4.11
  script:
    - kubectl version
    - make install-chart
    - make wait
    - make smoketest
    - make test
  after_script:
    - make uninstall-chart
    - make delete_namespace
    - cp -r charts/build/post-deployment build/
  environment:
    name: test
    kubernetes:
      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build/
    reports:
      junit: build/post-deployment/unit-tests.xml

pages:
  stage: pages
  tags:
    - k8srunner
  script:
   - mv build/htmlcov public
  when: always
  artifacts:
    paths:
      - public

# Standardised included jobs
variables:
  CHARTS_TO_PUBLISH: event-generator tango-example
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm_publish.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'

- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/build_push.yml'

- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/build_wheel.yml'
