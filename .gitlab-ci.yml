# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
# We store the artefact.skao.int/ska-k8s-tools/docker-builder:x.x.x as a group level variable for convenience
image: $SKA_K8S_TOOLS_BUILD_DEPLOY

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.


stages:
  - lint
  - build
  - test
  - analyse
  - destroy
  - deploy
  - integration
  - staging
  - join-reports
  - pages
  - publish
  - scan

#Join linting reports (This stage is temporary!)
join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"

# Include CI templates
include:
# OCI Images
# do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Jupyter notebook linting and testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/notebook.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# deploy steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'

python-test:
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ ! -z "$PYTANGO_VERSION"  ]]; then \
        echo "Received pytango version: $PYTANGO_VERSION" ; \
        poetry add pytango==$PYTANGO_VERSION
      fi
      if [[ -f pyproject.toml ]]; then
        echo "python-test: Installing with poetry";
        time poetry install;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;

# if the pipeline is called from an upstream project (ska-tango-images) 
# we don't lint, there's no need
python-lint:
  rules:
    - if: '$PYTANGO_VERSION == ""'
    - if: '$PYTANGO_VERSION == null'


k8s-test-no-operator:
  extends: k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-no-op'
    SKA_TANGO_OPERATOR: 'false'
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG-no-op
    on_stop: stop-k8s-test-no-operator
    auto_stop_in: 1 minute
  rules:
    - exists:
        - tests/**/*

stop-k8s-test-no-operator:
  extends: stop-k8s-test
  when: manual
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-no-op'
  environment:
    name: test/$CI_COMMIT_REF_SLUG-no-op
    action: stop

notebook-test:
  when: manual

destroy-analysis-test:
  stage: analyse
  needs:
    - job: python-test
      artifacts: true
  script:
    - |
      if [[ -d build/report.json ]]; then
        if [[ "$(jq .summary.failed report.json)" == "1" ]]; then
          echo "DELAY=1" >> variables.env
        else
          echo "DELAY=0" >> variables.env
        fi
      fi
  artifacts:
    reports:
      dotenv: variables.env

destroy-delayed:
  stage: destroy
  needs:
    - job: destroy-analysis-test
      artifacts: true
  script:
    - echo "TO DELAY OR NOT TO DELAY THAT IS THE QUESTION ----> $DELAY"
