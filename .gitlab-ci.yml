# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
# We store the artefact.skao.int/ska-k8s-tools/docker-builder:x.x.x as a group level variable for convenience
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - join-reports
  - test
  - pages
  - publish
  - scan

test-vault:
  secrets:
    DATABASE_PASSWORD:
      vault: ska-telescope/mypassword@kv
  stage: lint
  tags:
    - k8srunner
  script:
    - echo "My password is $DATABASE_PASSWORD - tada"

read_secrets:
  image: "vault:1.9.2"
  stage: lint
  tags:
    - k8srunner
  script:
    # Check job's ref name
    - echo $CI_COMMIT_REF_NAME
    # and is this ref protected
    - echo $CI_COMMIT_REF_PROTECTED
    - echo "CI_JOB_JWT=$CI_JOB_JWT"
    # Vault's address can be provided here or as CI/CD variable
    - export VAULT_ADDR=https://vault.engageska-portugal.pt
    # Authenticate and get token. Token expiry time and other properties can be configured
    # when configuring JWT Auth - https://www.vaultproject.io/api/auth/jwt#parameters-1
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=ska-telescope-devsecops jwt=$CI_JOB_JWT)"
    - echo "VAULT_TOKEN=$VAULT_TOKEN"
    # Now use the VAULT_TOKEN to read the secret and store it in an environment variable
    - export PASSWORD="$(vault kv get -field=mypassword kv/ska-telescope)"
    # Use the secret
    - echo "PASSWORD=$PASSWORD"

#Join linting reports (This stage is temporary!)
join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Include CI templates
include:
# OCI Images
  # do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'
