# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string.
before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - lint
  - test
  - publish
  - pages

# *********************************************
## Docker Workflow

build:
  stage: build
  tags:
    - docker-executor
  script:
    - make build
  artifacts:
    when: always
    paths:
      - build

.lint:
  stage: lint
  tags:
    - docker-executor
  script:
    - make lint
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build

publish:
  stage: publish
  tags:
    - docker-executor
  script:
    - make build
    - make push

pages:
  stage: pages
  tags:
    - docker-executor
  script:
   - ls -la
   - mkdir .public
   - cp build/coverage.xml .public
   - cp -r build/htmlcov/* .public
   - mv .public public
  when: always
  artifacts:
    paths:
      - public
    expire_in: 30 days

# *********************************************
## K8s Workflow
lint-check-chart:
  stage: lint
  tags:
    - minikube
  script:
    - make helm_dependencies
    - make chart_lint
  allow_failure: true
  artifacts:
    paths:
      - public

test:
  stage: test
  variables:
    KUBE_NAMESPACE: "tango-example"
  tags:
    - minikube
  script:
    - export KUBE_NAMESPACE="ci-ska-docker-$CI_COMMIT_SHORT_SHA"
    - kubectl version
    - make install-chart
    - make wait
    - make smoketest
    - make test
  after_script:
    - export KUBE_NAMESPACE="ci-ska-docker-$CI_COMMIT_SHORT_SHA"
    - make uninstall-chart
    - make delete_namespace
  environment:
    name: test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: charts/build/report.xml

# *********************************************
create ci metrics:
  stage: .post
  when: always
  tags:
    - minikube
  script:
    # Gitlab CI badges creation: START
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  allow_failure: true
  artifacts:
    paths:
      - ./build

publish-chart:
  # variables:
  #   CHARTS_TO_PUBLISH: event-generator tango-example
  stage: publish
  when: always
  # only:
  #   - helm-publish
  tags:
    - docker-executor
  script:
    - apt-get -y update
    - apt-get install -y curl ca-certificates --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/stupid/raw/master/scripts/publish-charts.sh | bash
