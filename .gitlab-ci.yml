# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skatelescope.org/ska-k8s-tools/docker-builder:0.2.5

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - lint
  - test
  - pages
  - publish

lint-check-chart:
  stage: lint
  tags:
    - k8srunner
  image: artefact.skatelescope.org/ska-k8s-tools/deploy:0.4.5
  script:
    - make chart_lint
  artifacts:
    paths:
      - build

test:
  stage: test
  variables:
    MINIKUBE: "false"
  tags:
    - k8srunner
  image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
  script:
    - kubectl version
    - make install-chart
    - make wait
    - make smoketest
    - make test
  after_script:
    - make uninstall-chart
    - make delete_namespace
    - mkdir -p build
    - cp -rf charts/build/* build/
    - ls -la build
    - mkdir build/reports
    - cp build/report.xml build/reports/unit-tests.xml
    - cp build/coverage.xml build/reports/code-coverage.xml
    - cp build/linting.xml build/reports/linting.xml
    - cat build/reports/linting.xml
  environment:
    name: test
    kubernetes:
      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build
    reports:
      junit: build/report.xml


build wheel for publication: # Executed on a tag
  allow_failure: true
  stage: build
  tags:
    - k8srunner
  script:
    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/st-758/scripts/metadata/extract-metadata.sh -o extract-metadata.sh && chmod +x extract-metadata.sh
    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/st-758/scripts/metadata/patch-metadata.sh -o patch-metadata.sh && chmod +x patch-metadata.sh
    - python3 setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
    - ./extract-metadata.sh MANIFEST.skao.int 
    - ./patch-metadata.sh ./dist/tango_example-$(awk -F= '/^release=/{print $2}' .release)+$CI_COMMIT_SHORT_SHA-py3-none-any.whl MANIFEST.skao.int
  rules:
    - if: '$CI_COMMIT_TAG'
  artifacts:
    paths:
      - ./dist/

build wheel for development: # Executed on non-tagged commit
  allow_failure: true
  stage: build
  tags:
    - k8srunner
  script:
    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/st-758/scripts/metadata/extract-metadata.sh -o extract-metadata.sh && chmod +x extract-metadata.sh
    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/st-758/scripts/metadata/patch-metadata.sh -o patch-metadata.sh && chmod +x patch-metadata.sh
    - python3 setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
    - ./extract-metadata.sh MANIFEST.skao.int 
    - ./patch-metadata.sh ./dist/tango_example-$(awk -F= '/^release=/{print $2}' .release)+dev.$CI_COMMIT_SHORT_SHA-py3-none-any.whl MANIFEST.skao.int
  rules:
    - if: '$CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""'
  artifacts:
    paths:
      - ./dist/

publish to nexus:
  stage: publish
  tags:
    - k8srunner
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    - python3 -m pip install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  #rules:
    # PyPI package release only on tags, and confirm semantic versioning of tag
    # - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/'

pages:
  stage: pages
  tags:
    - k8srunner
  script:
   - ls -la
   - mkdir .public
   - cp build/coverage.xml .public
   - cp -r build/htmlcov/* .public
   - mv .public public
  when: always
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 30 days

# # *********************************************
# # The ci badges are generated from the test results found in specified paths.
# # First we need to copy the test result files to the correct paths.
# move-test-artifacts:
#   stage: publish
#   tags:
#     - k8srunner
#   image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
#   script:
#     - if true; then echo "script passed"; fi
#   after_script:
# # NOTE: THE source PATHS (path/to/) ARE EXAMPLES ONLY AND SHOULD BE CHANGED
#     - mkdir build/reports
#     - cp build/report.xml build/reports/unit-tests.xml
#     - cp build/coverage.xml build/reports/code-coverage.xml
#     - cp build/linting.xml build/reports/linting.xml
#     - cat build/reports/linting.xml
#   artifacts:
#     paths:
#       - build

# Standardised included jobs
variables:
  CHARTS_TO_PUBLISH: event-generator tango-example
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  ref: st-758
  file: 'gitlab-ci/includes/helm_publish.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'

- project: 'ska-telescope/templates-repository'
  ref: st-758
  file: 'gitlab-ci/includes/build_push.yml'
